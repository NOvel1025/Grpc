// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/docker.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcServer {
  public static partial class Docker
  {
    static readonly string __ServiceName = "docker.Docker";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.ExecutionResult> __Marshaller_docker_ExecutionResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.ExecutionResult.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.FileInfomation> __Marshaller_docker_FileInfomation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.FileInfomation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.ExecutionOutput> __Marshaller_docker_ExecutionOutput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.ExecutionOutput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::GrpcServer.ExecutionInput> __Marshaller_docker_ExecutionInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcServer.ExecutionInput.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcServer.ExecutionResult, global::GrpcServer.FileInfomation> __Method_AutoExecStream = new grpc::Method<global::GrpcServer.ExecutionResult, global::GrpcServer.FileInfomation>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "AutoExecStream",
        __Marshaller_docker_ExecutionResult,
        __Marshaller_docker_FileInfomation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcServer.FileInfomation, global::GrpcServer.ExecutionResult> __Method_AutoExec = new grpc::Method<global::GrpcServer.FileInfomation, global::GrpcServer.ExecutionResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AutoExec",
        __Marshaller_docker_FileInfomation,
        __Marshaller_docker_ExecutionResult);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::GrpcServer.FileInfomation> __Method_ManualRequest = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::GrpcServer.FileInfomation>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ManualRequest",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_docker_FileInfomation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcServer.ExecutionOutput, global::GrpcServer.ExecutionInput> __Method_ManualExecStream = new grpc::Method<global::GrpcServer.ExecutionOutput, global::GrpcServer.ExecutionInput>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "ManualExecStream",
        __Marshaller_docker_ExecutionOutput,
        __Marshaller_docker_ExecutionInput);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::GrpcServer.FileInfomation, global::GrpcServer.ExecutionOutput> __Method_ManualEClientStream = new grpc::Method<global::GrpcServer.FileInfomation, global::GrpcServer.ExecutionOutput>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "ManualEClientStream",
        __Marshaller_docker_FileInfomation,
        __Marshaller_docker_ExecutionOutput);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcServer.DockerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Docker</summary>
    [grpc::BindServiceMethod(typeof(Docker), "BindService")]
    public abstract partial class DockerBase
    {
      /// <summary>
      ///自動実行用のファイル情報送信　引数：実行結果　戻り値：ファイル情報
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task AutoExecStream(grpc::IAsyncStreamReader<global::GrpcServer.ExecutionResult> requestStream, grpc::IServerStreamWriter<global::GrpcServer.FileInfomation> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///自動実行依頼送信　引数：ファイル情報　戻り値：実行結果
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::GrpcServer.ExecutionResult> AutoExec(global::GrpcServer.FileInfomation request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///手動実行リクエスト用の待機サーバーストリーム　引数：なし　戻り値：ファイル情報
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ManualRequest(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::IServerStreamWriter<global::GrpcServer.FileInfomation> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///手動実行ストリーム　引数：手動実行出力　戻り値：手動実行入力
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ManualExecStream(grpc::IAsyncStreamReader<global::GrpcServer.ExecutionOutput> requestStream, grpc::IServerStreamWriter<global::GrpcServer.ExecutionInput> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///手動実行ストリームEX2のクライアント側との通信　引数：ファイル情報　戻り値：手動実行出力
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ManualEClientStream(grpc::IAsyncStreamReader<global::GrpcServer.FileInfomation> requestStream, grpc::IServerStreamWriter<global::GrpcServer.ExecutionOutput> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(DockerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AutoExecStream, serviceImpl.AutoExecStream)
          .AddMethod(__Method_AutoExec, serviceImpl.AutoExec)
          .AddMethod(__Method_ManualRequest, serviceImpl.ManualRequest)
          .AddMethod(__Method_ManualExecStream, serviceImpl.ManualExecStream)
          .AddMethod(__Method_ManualEClientStream, serviceImpl.ManualEClientStream).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DockerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AutoExecStream, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::GrpcServer.ExecutionResult, global::GrpcServer.FileInfomation>(serviceImpl.AutoExecStream));
      serviceBinder.AddMethod(__Method_AutoExec, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcServer.FileInfomation, global::GrpcServer.ExecutionResult>(serviceImpl.AutoExec));
      serviceBinder.AddMethod(__Method_ManualRequest, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::GrpcServer.FileInfomation>(serviceImpl.ManualRequest));
      serviceBinder.AddMethod(__Method_ManualExecStream, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::GrpcServer.ExecutionOutput, global::GrpcServer.ExecutionInput>(serviceImpl.ManualExecStream));
      serviceBinder.AddMethod(__Method_ManualEClientStream, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::GrpcServer.FileInfomation, global::GrpcServer.ExecutionOutput>(serviceImpl.ManualEClientStream));
    }

  }
}
#endregion
